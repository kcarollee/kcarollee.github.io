#ifdef GL_ES
precision highp float;
#endif

#extension GL_OES_standard_derivatives : enable

uniform float time;
uniform vec2 mouse;
uniform vec2 resolution;
uniform sampler2D backbuffer;

vec3 get(float x, float y){
	return texture2D(backbuffer, (gl_FragCoord.xy + vec2(x, y)) / resolution).rgb;
}

float getr(float x, float y){
	return texture2D(backbuffer, (gl_FragCoord.xy + vec2(x, y)) / resolution).r;
}

float getg(float x, float y){
	return texture2D(backbuffer, (gl_FragCoord.xy + vec2(x, y)) / resolution).g;
}



vec3 laplacian(vec2 uv, float de){
	vec3 sum = vec3(.0);
	float d = de;
	float sideCoef = 0.2;
	float cornerCoef = 0.25 - sideCoef;
	sum += get(-d, 0.0) * sideCoef;
	sum += get(-d, -d) * cornerCoef;
	sum += get(-d, d) * cornerCoef;
	sum += get(d, 0.0) * sideCoef;
	sum += get(d, -d) * cornerCoef;
	sum += get(d, d) * cornerCoef;
	sum += get(0.0, -d) * sideCoef;
	sum += get(0.0, d) * sideCoef;
	sum += get(.0, .0) * -1.0;
	return sum;
}

float circle(vec2 uv){
	return 1.0 - step(0.001, length(mouse - uv));
}

float newAVal(vec2 uv, float a, float b, float da, float f, float k, float de){
	return a +  (da * (laplacian(uv, de).r) - a * b * b + f * (1.0 - a));
}

float newBVal(vec2 uv, float a, float b, float db, float f, float k, float de){
	return b +  (db * (laplacian(uv, de).g) + a * b * b - (k + f) * b);
}


void main( void ) {

	vec2 uv = gl_FragCoord.xy / resolution.xy;
	vec3 outColor = vec3(.0);

	float da = 1.0;
	float db = 0.1;
	float dt = 1.0;
	float de = 1.0;
	float f = .0545; // feed rate
	float k = .062; // kill rate
	
	vec3 lap = laplacian(uv, de);
	vec3 v = get(.0, .0);
	

	float a = v.r;
	float b = v.g;
	float abb = a * b * b;

	float nexta = da * lap.r - abb + f * (1.0 - a);
	float nextb = db * lap.g + abb - (f + k) * b;

	outColor += vec3(v.r, v.g, .0)  + vec3(nexta, nextb, .0);

	//outColor +=  vec3(newa, newb , .0);

	
	outColor += circle(uv);
	
	
	

	gl_FragColor = vec4( outColor, 1.0 );

}